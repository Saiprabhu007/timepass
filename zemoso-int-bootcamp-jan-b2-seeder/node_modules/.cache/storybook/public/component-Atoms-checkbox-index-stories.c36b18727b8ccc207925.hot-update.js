"use strict";
globalThis["webpackHotUpdatezemoso_int_bootcamp_jan_b2_seeder"]("component-Atoms-checkbox-index-stories",{

/***/ "./src/component/Atoms/checkbox/index.stories.tsx":
/*!********************************************************!*\
  !*** ./src/component/Atoms/checkbox/index.stories.tsx ***!
  \********************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Checked": () => (/* binding */ Checked),
/* harmony export */   "CheckedDisabled": () => (/* binding */ CheckedDisabled),
/* harmony export */   "Default": () => (/* binding */ Default),
/* harmony export */   "Disabled": () => (/* binding */ Disabled),
/* harmony export */   "__namedExportsOrder": () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index */ "./src/component/Atoms/checkbox/index.tsx");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-dev-runtime */ "./node_modules/react/jsx-dev-runtime.js");
/* provided dependency */ var __react_refresh_utils__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js");
/* provided dependency */ var __react_refresh_error_overlay__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js");
__webpack_require__.$Refresh$.runtime = __webpack_require__(/*! ./node_modules/react-refresh/runtime.js */ "./node_modules/react-refresh/runtime.js");

var _jsxFileName = "C:\\Users\\SAI PRABHU\\OneDrive\\Desktop\\zemoso-int-bootcamp-jan-b2-seeder\\src\\component\\Atoms\\checkbox\\index.stories.tsx",
  _s = __webpack_require__.$Refresh$.signature();



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  title: "Atoms/Checkbox",
  component: _index__WEBPACK_IMPORTED_MODULE_1__["default"],
  argTypes: {
    label: {
      control: "text"
    },
    checked: {
      control: "boolean"
    },
    disabled: {
      control: "boolean"
    }
  }
});
const Template = _ref => {
  _s();
  let {
    checked,
    disabled,
    onChange,
    ...args
  } = _ref;
  const [isChecked, setIsChecked] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(checked || false);
  const [isDisabled, setIsDisabled] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(disabled || false);
  const handleOnChange = () => {
    const newValue = !isChecked;
    setIsChecked(newValue);
    onChange && onChange(newValue);
  };
  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(_index__WEBPACK_IMPORTED_MODULE_1__["default"], {
    ...args,
    checked: isChecked,
    onChange: handleOnChange,
    disabled: isDisabled
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 27,
    columnNumber: 5
  }, undefined);
};
_s(Template, "KjhJWUk4OtRsfg5qB+Odj80LzG0=");
_c = Template;
const Default = Template.bind({});
Default.args = {
  label: "Checkbox",
  checked: false,
  disabled: false
};
const Checked = Template.bind({});
Checked.args = {
  label: "Checked Checkbox",
  checked: undefined
};
const Disabled = Template.bind({});
Disabled.args = {
  label: "Disabled Checkbox",
  disabled: true
};
const CheckedDisabled = Template.bind({});
CheckedDisabled.args = {
  label: "Checked Disabled Checkbox",
  checked: true,
  disabled: true
};
var _c;
__webpack_require__.$Refresh$.register(_c, "Template");
const __namedExportsOrder = ["Default", "Checked", "Disabled", "CheckedDisabled"];
Default.parameters = {
  ...Default.parameters,
  docs: {
    ...Default.parameters?.docs,
    source: {
      originalSource: "_ref => {\n  _s();\n  let {\n    checked,\n    disabled,\n    onChange,\n    ...args\n  } = _ref;\n  const [isChecked, setIsChecked] = useState(checked || false);\n  const [isDisabled, setIsDisabled] = useState(disabled || false);\n  const handleOnChange = () => {\n    const newValue = !isChecked;\n    setIsChecked(newValue);\n    onChange && onChange(newValue);\n  };\n  return /*#__PURE__*/_jsxDEV(Checkbox, {\n    ...args,\n    checked: isChecked,\n    onChange: handleOnChange,\n    disabled: isDisabled\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}",
      ...Default.parameters?.docs?.source
    }
  }
};
Checked.parameters = {
  ...Checked.parameters,
  docs: {
    ...Checked.parameters?.docs,
    source: {
      originalSource: "_ref => {\n  _s();\n  let {\n    checked,\n    disabled,\n    onChange,\n    ...args\n  } = _ref;\n  const [isChecked, setIsChecked] = useState(checked || false);\n  const [isDisabled, setIsDisabled] = useState(disabled || false);\n  const handleOnChange = () => {\n    const newValue = !isChecked;\n    setIsChecked(newValue);\n    onChange && onChange(newValue);\n  };\n  return /*#__PURE__*/_jsxDEV(Checkbox, {\n    ...args,\n    checked: isChecked,\n    onChange: handleOnChange,\n    disabled: isDisabled\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}",
      ...Checked.parameters?.docs?.source
    }
  }
};
Disabled.parameters = {
  ...Disabled.parameters,
  docs: {
    ...Disabled.parameters?.docs,
    source: {
      originalSource: "_ref => {\n  _s();\n  let {\n    checked,\n    disabled,\n    onChange,\n    ...args\n  } = _ref;\n  const [isChecked, setIsChecked] = useState(checked || false);\n  const [isDisabled, setIsDisabled] = useState(disabled || false);\n  const handleOnChange = () => {\n    const newValue = !isChecked;\n    setIsChecked(newValue);\n    onChange && onChange(newValue);\n  };\n  return /*#__PURE__*/_jsxDEV(Checkbox, {\n    ...args,\n    checked: isChecked,\n    onChange: handleOnChange,\n    disabled: isDisabled\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}",
      ...Disabled.parameters?.docs?.source
    }
  }
};
CheckedDisabled.parameters = {
  ...CheckedDisabled.parameters,
  docs: {
    ...CheckedDisabled.parameters?.docs,
    source: {
      originalSource: "_ref => {\n  _s();\n  let {\n    checked,\n    disabled,\n    onChange,\n    ...args\n  } = _ref;\n  const [isChecked, setIsChecked] = useState(checked || false);\n  const [isDisabled, setIsDisabled] = useState(disabled || false);\n  const handleOnChange = () => {\n    const newValue = !isChecked;\n    setIsChecked(newValue);\n    onChange && onChange(newValue);\n  };\n  return /*#__PURE__*/_jsxDEV(Checkbox, {\n    ...args,\n    checked: isChecked,\n    onChange: handleOnChange,\n    disabled: isDisabled\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}",
      ...CheckedDisabled.parameters?.docs?.source
    }
  }
};

const $ReactRefreshModuleId$ = __webpack_require__.$Refresh$.moduleId;
const $ReactRefreshCurrentExports$ = __react_refresh_utils__.getModuleExports(
	$ReactRefreshModuleId$
);

function $ReactRefreshModuleRuntime$(exports) {
	if (true) {
		let errorOverlay;
		if (typeof __react_refresh_error_overlay__ !== 'undefined') {
			errorOverlay = __react_refresh_error_overlay__;
		}
		let testMode;
		if (typeof __react_refresh_test__ !== 'undefined') {
			testMode = __react_refresh_test__;
		}
		return __react_refresh_utils__.executeRuntime(
			exports,
			$ReactRefreshModuleId$,
			module.hot,
			errorOverlay,
			testMode
		);
	}
}

if (typeof Promise !== 'undefined' && $ReactRefreshCurrentExports$ instanceof Promise) {
	$ReactRefreshCurrentExports$.then($ReactRefreshModuleRuntime$);
} else {
	$ReactRefreshModuleRuntime$($ReactRefreshCurrentExports$);
}

/***/ })

});